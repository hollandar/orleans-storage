@using Cadence.UI.Components
@using Microsoft.AspNetCore.Components.Forms
@using Webefinity.ContentRoot.IndexUI.Interfaces

@inject HttpClient httpClient
@inject IFileBrowserService FileBrowserService


<div class="panel">
    <h2>Upload a file</h2>
    <div class="stack horizontal between gap-2">
    <InputFile id="imageRebuildInput" OnChange="SetUploadFile" accept="*" />
    <Button Class="primary" Clicked="UploadFile" disabled="@(!uploadAvailable)">Upload</Button>
    </div>
    @if (errorMessage is not null)
    {
        <p class="text-danger">@errorMessage</p>
    }
</div>

@code {
    [Parameter] public KeyCollection KeyCollection { get; set; } = default!;
    [Parameter] public EventCallback<string> OnFileUploaded { get; set; } = default!;


    IBrowserFile? uploadFile = null;
    bool uploadAvailable = false;
    string? errorMessage = null;

    protected override void OnParametersSet()
    {
        if (KeyCollection is null)
        {
            throw new InvalidOperationException("KeyCollection must be set before rendering.");
        }

        base.OnParametersSet();
    }

    public Task SetUploadFile(InputFileChangeEventArgs inputFileChangeEventArgs)
    {
        this.uploadFile = inputFileChangeEventArgs.File;
        uploadAvailable = uploadFile != null;
        StateHasChanged();

        return Task.CompletedTask;
    }

    protected async Task UploadFile()
    {
        if (uploadFile != null)
        {
            var fileStream = this.uploadFile.OpenReadStream(4096000);
            var result = await FileBrowserService.UploadFileAsync(KeyCollection.Collection, this.uploadFile.Name, this.uploadFile.ContentType, fileStream, KeyCollection.Key);
            if (result.Success)
            {
                await OnFileUploaded.InvokeAsync(this.uploadFile.Name);

                errorMessage = null;
                this.uploadFile = null;
                uploadAvailable = false;
            }
            else
            {
                errorMessage = result.Message;
            }

            StateHasChanged();
        }
    }
}
