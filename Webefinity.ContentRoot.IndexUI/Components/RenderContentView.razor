@using Webefinity.ContentRoot.Index.Models
@using Webefinity.ContentRoot.IndexUI.Interfaces

@inject IFileBrowserService FileBrowserService

@switch (ContentType)
{
    case var ct when ct?.StartsWith("image/") ?? false:
        {
            <div class="card">
                <img src="@($"icr/{KC!.Key}/{KC.Collection}/{File.FileName}")" />
            </div>
        }
        break;
    case "text/x-markdown" when content is not null:
        {
            <div class="card">
                <Cadence.UI.Components.Markdown Md="@content" />
            </div>
        }
        break;
    default:
        {
            <!-- No content loaded for @File.FileName -->
        }
        break;
}

@code {
    [CascadingParameter(Name = "KeyCollection")] public KeyCollection KC { get; set; } = default!;
    [Parameter, EditorRequired] public FileMetadataModel File { get; set; } = default!;

    static HashSet<string> loadableContentTypes = ["text/x-markdown"];
    protected bool reload = false;

    public string? ContentType => File.GetMetadataValue<string>("Content-Type");
    private string? content = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (reload && ContentType is not null && loadableContentTypes.Contains(ContentType))
        {
            content = await LoadContentAsync();
            reload = false;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override void OnParametersSet()
    {
        if (KC is null)
        {
            throw new InvalidOperationException("KeyCollection must be set before rendering.");
        }

        reload = true;
        StateHasChanged();

        base.OnParametersSet();
    }

    protected async Task<string> LoadContentAsync()
    {
        var result = await FileBrowserService.LoadFileContentAsync(KC.Collection, this.File.FileName, KC.Key);

        if (result.Success && result.Value is not null)
        {
            using var reader = new StreamReader(result.Value);
            return await reader.ReadToEndAsync();
        }
        else
        {
            // Handle failure (e.g., log error, show message to user)
            return string.Empty;
        }
    }
}
