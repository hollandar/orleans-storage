@using System.Net.Http.Json
@using Cadence.UI.Components
@using Webefinity.ContentRoot.Index.Models
@using Webefinity.ContentRoot.IndexUI.Interfaces
@using Webefinity.Results

@inject HttpClient httpClient
@inject IFileBrowserService FileBrowserService

<div class="browser">
    <div class="panel file-browser-panel">
        <h2>Files</h2>
        <div class="file-repeater repeater-control repeater-2">
            <Repeater @ref="fileRepeater" ItemsProvider="FileListProvider">
                <Header>
                    <div class="repeater-control-row repeater-head">
                        <div class="file-name">
                            Filename
                        </div>
                    </div>
                </Header>
                <Content>
                    <div class="repeater-control-row" @key="context.Id">
                        <div class="file-name">
                            <Button class="link" Clicked="() => SelectFile(context.Item.Id)">@context.Item.FileName</Button>
                        </div>
                    </div>
                </Content>
            </Repeater>
        </div>
    </div>

    @if (selectedFile is not null)
    {
        <div class="panel">
            <h2>Details: @selectedFile.FileName</h2>
            <p>@selectedFile.Id</p>

            <ul>
                @foreach (var meta in selectedFile.Metadata)
                {
                    <li> @meta.Key: @meta.Value.RootElement.ToString()</li>
                }
            </ul>

            <div class="actions">
                <a class="button" target="_blank" href="@($"icr/{KeyCollection!.Key}/{KeyCollection.Collection}/{selectedFile.FileName}")" title="@($"Download {selectedFile.FileName}")"><i class="fa-solid fa-arrow-up-right-from-square"></i><span>Download</span></a>
                <Button Clicked="DeleteFileAsync"><i class="fa-solid fa-trash"></i><span>Delete</span></Button>
            </div>

            <RenderContentView File="selectedFile" KeyCollection="KeyCollection"/>
        </div>
    }
</div>

@code {
    [Parameter, SupplyParameterFromQuery(Name = "r")] public string? ReturnUrl { get; set; } = "/";
    [Parameter] public KeyCollection KeyCollection { get; set; } = default!;

    private Repeater<FileMetadataModel>? fileRepeater = null;
    private FileMetadataModel? selectedFile = null;

    protected override void OnParametersSet()
    {
        if (KeyCollection is null)
        {
            throw new InvalidOperationException("KeyCollection must be set before rendering.");
        }

        base.OnParametersSet();
    }

    protected async Task<TableRowResult<FileMetadataModel>> FileListProvider(TableRowParams args)
    {
        var files = await FileBrowserService.ListFiles(KeyCollection.Collection, null, args.Skip, args.Take, KeyCollection.Key);
        return new TableRowResult<FileMetadataModel>(files.TotalCount, files.Items);
    }

    protected async Task SelectFile(Guid fileId)
    {
        var result = await FileBrowserService.GetFileMetadataAsync(KeyCollection.Collection, fileId.ToString(), KeyCollection.Key);
        if (result.Success)
        {
            selectedFile = result.Value;
        }

        else
        {
            // Handle failure
            selectedFile = null;
        }

        StateHasChanged();
    }

    protected async Task DeleteFileAsync()
    {
        ArgumentNullException.ThrowIfNull(this.selectedFile, nameof(this.selectedFile));
        var result = await this.FileBrowserService.DeleteFileAsync(KeyCollection.Collection, this.selectedFile.FileName, KeyCollection.Key);
        if (result)
        {
            this.selectedFile = null;
            await this.RefreshAsync();
        }

        StateHasChanged();
    }

    public async Task RefreshAsync()
    {
        if (fileRepeater is not null)
            await fileRepeater.RefreshAsync();
    }

    public async Task SetKeyCollectionAsync(KeyCollection keyCollection)
    {
        this.KeyCollection = keyCollection;
        await this.InvokeAsync(StateHasChanged);
        await this.RefreshAsync();
    }
}
