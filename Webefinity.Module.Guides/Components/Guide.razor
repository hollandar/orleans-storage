@using Webefinity.Module.Guides.Abstractions
@using Webefinity.Module.Guides.Services
@using Microsoft.JSInterop;

@rendermode InteractiveAuto
@implements IAsyncDisposable
@inject IJSRuntime JS


@inject IGuideService GuideService

@if (isAvailable && this.GuideService.IsVisible)
{
    <div class="guide" @ref="guideElement">

        <div class="guide-header">
            <div>
                <h1>@this.guideContent.Title</h1>
            </div><Button class="control" Clicked="CloseAsync"><i class="fa-solid fa-xmark fa-xl"></i></Button>
        </div>

        <div class="guide-content">
            @((MarkupString)(this.guideContent.Content))
        </div>


        <div class="guide-footer actions">
            <Button class="control" Clicked="DoNotShowAgainAsync" Text="Do not show again.">
                <Icon><i class="fa-solid fa-xmark"></i></Icon>
            </Button>
        </div>
    </div>
}

@code {

    [Parameter] public RenderFragment ChildContent { get; set; } = default!;
    private bool isAvailable = false;
    private GuideContentRecord guideContent = new("Loading", "<p>Loading...</p>");
    private IJSObjectReference? jsModule;
    private ElementReference guideElement;
    private DotNetObjectReference<Guide>? dotNetObjectReference = null;
    

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await ReloadAsync("welcome");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.jsModule = await JS.InvokeAsync<IJSObjectReference>("import",
            "./_content/Webefinity.Module.Guides/Components/Guide.razor.js");
        }

        if (this.jsModule is not null)
        {
            dotNetObjectReference ??= DotNetObjectReference.Create(this);
            await this.jsModule.InvokeVoidAsync("adjustAnchors", guideElement, dotNetObjectReference);
        }
    }

    [JSInvokable]
    public async Task VisitAnchorAsync(string anchor)
    {
        Console.WriteLine($"Visiting anchor: {anchor}");
        await this.ReloadAsync(anchor, CancellationToken.None);
    }

    public async ValueTask DisposeAsync()
    {
        this.dotNetObjectReference?.Dispose();
        if (this.jsModule is not null)
        {
            await this.jsModule.DisposeAsync();
            this.jsModule = null;
        }

        this.GuideService.UnregisterGuide(this);
    }

    private Task CloseAsync()
    {
        this.GuideService.ToggleVisibilityAsync();
        return Task.CompletedTask;
    }

    public async Task RefreshAsync()
    {
        this.isAvailable = await GuideService.IsGuideAvailableAsync(CancellationToken.None) && !await
        GuideService.IsGuideHiddenAsync(CancellationToken.None);
        await InvokeAsync(StateHasChanged);
    }

    public async Task ReloadAsync(string guide, CancellationToken cancellationToken = default)
    {
        Console.WriteLine($"Reloading {guide} Guide");
        this.guideContent = await GuideService.GetGuideContentAsync(guide, cancellationToken);
        await RefreshAsync();
    }

    private async Task DoNotShowAgainAsync()
    {
        await GuideService.SetIsGuideHiddenAsync(true, CancellationToken.None);
        this.isAvailable = false;
        await InvokeAsync(StateHasChanged);
    }

}