@using Cadence.UI.Components
@using Cadence.UI.Extensions
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using Webefinity.Module.Blocks.Services

@inject NavigationManager Nav
@inject IHttpContextAccessor HttpContextAccessor
@inject BlocksProviderService BlocksProvider
@inject IEnumerable<PageControlLink> PageControlLinks

@rendermode InteractiveServer

@if (pageOutline?.Exists ?? false)
{
    <div class="blocks-actionbar stack horizontal start gap-2">
        <div class="bold">Page</div>
        <div>
            <Button class="button inline" Clicked="SwitchRenderModeAsync">
                @switch (RenderMode)
                {
                    default:
                    case PageRenderMode.ReadOnly:
                        <i class="fa-solid fa-lock"></i>
                        break;
                    case PageRenderMode.Edit:
                        <i class="fa-solid fa-lock-open"></i>
                        break;
                }
            </Button>
        </div>
        <div>
            <Button class="button inline" Clicked="ShowPageSettingsAsync"><i class="fa-solid fa-cog"></i></Button>
        </div>
        <div>
            <PublishStateDisplay State="@pageOutline.State" />
        </div>
        @foreach (var targetState in pageOutline.State.GetAllowedTransitions())
        {
            <div @key="@targetState">
                @switch (targetState)
                {
                    case PublishState.Draft:
                        {
                            <Button class="control" Clicked="PublishPageDraftAsync" title="Set page to draft.">
                                <Icon><i class="fa-solid fa-pen-to-square"></i></Icon>
                            </Button>
                        }
                        break;
                    case PublishState.Published:
                        {
                            <Button class="control" Clicked="PublishPagePublishedAsync" title="Publish this page.">
                                <Icon><i class="fa-solid fa-check"></i></Icon>
                            </Button>
                        }
                        break;
                    case PublishState.Archived:
                        {
                            <Button class="control" Clicked="PublishPageArchivedAsync" title="Archive this page.">
                                <Icon><i class="fa-solid fa-box-archive"></i></Icon>
                            </Button>
                        }
                        break;
                    default:
                        {
                            <p>Unknown publish state: @(targetState.ToDisplayString())</p>
                        }
                        break;
                }
            </div>
        }
        <div class="actions">
            <Button class="control" Clicked="() => DeletePageAsync()" title="Delete this page.">
                <Icon><i class="fa-solid fa-trash"></i></Icon>
            </Button>

            @foreach (var link in PageControlLinks)
            {
                <Button class="control" Clicked="() => Nav.NavigateToWithReturn(link.link)">
                    <Icon><i class="@link.icon"></i></Icon>
                </Button>
            }

        </div>
    </div>


    @if (showSettings)
    {
        <div class="panel">
            <h4>Page Settings</h4>
            <EditForm Model="@settingsModel" OnValidSubmit="UpdateBlockSettingsAsync">
                <FluentValidator TModelType="UpdateBlockSettingsRequest" TValidator="UpdateBlockSettingsRequestValidator" />
                <div class="field">
                    <InputText type="text" @bind-Value="settingsModel.Name" Label="Name" Placeholder="Page name" Required />
                    <ValidationMessage For="@(() => settingsModel.Name)" />
                </div>
                <div class="field">
                    <InputText type="text" @bind-Value="settingsModel.Title" Label="Title" Placeholder="Page title" Required />
                    <ValidationMessage For="@(() => settingsModel.Title)" />
                </div>
                <div class="field">
                    <InputSelect @bind-Value="settingsModel.State">
                        @foreach (var state in PublishStateHelpers.ToKeyValuePairs())
                        {
                            <option value="@state.Key" selected="@(state.Key == settingsModel.State)">@state.Value</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => settingsModel.State)" />
                </div>
                <div class="actions">
                    <button class="primary" type="submit">Update</button>
                    <button class="secondary" type="button" @onclick="() => showSettings = false">Close</button>
                </div>
            </EditForm>
        </div>
    }

    @switch (RenderMode)
    {
        case PageRenderMode.Edit:
            {
                <BlocksPageByName PageName="@PageName" />
            }
            break;
        case PageRenderMode.ReadOnly:
            {
                <BlocksPageByName_ReadOnly PageName="@PageName" />
            }
            break;
        default:
            {
                <div class="alert danger">
                    Unsupported render mode.
                </div>

            }
            break;
    }
}
else
{
    <PageNotFound PageName="@PageName" />
}

@if (pageOutline is not null)
{
    <Dialog Modal @ref="deletePageDialog">
        <Header>
            <h4>About to delete '@pageOutline.Title'?</h4>
        </Header>
        <Content>
            <p>You are about to delete this page and all content on the page, are you sure?
            </p>
            <p>You can instead change page settings to mark it archived or deleted.</p>
        </Content>
        <Footer>
            <div class="actions end">
                <Button class="danger" Clicked="async () => await DeletePageAsync(true)">Yes, delete
                    @(pageOutline.Title)</Button>
                <Button class="secondary" Clicked="async () => await DeletePageAsync(false)">No, keep it!</Button>
            </div>
        </Footer>
    </Dialog>
}

@code {
    public enum PageRenderMode
    {
        ReadOnly,
        Edit
    }
    [Parameter,EditorRequired] public string PageName { get; set; } = default!;
    [Parameter] public PageRenderMode RenderMode { get; set; } = PageRenderMode.ReadOnly;
    private PageOutlineModel? pageOutline = default!;
    Dialog deletePageDialog = default!;
    UpdateBlockSettingsRequest settingsModel = new();
    bool showSettings = false;


    protected override async Task OnInitializedAsync()
    {
        PageName ??= "home";
        await RefreshPageAsync();

        await base.OnInitializedAsync();
    }

    async Task RefreshPageAsync()
    {
        pageOutline = await BlocksProvider.GetPageOutlineAsync(PageName, CancellationToken.None);

        await InvokeAsync(StateHasChanged);
    }

    protected Uri GetPageUri() => new Uri(Nav.Uri);

    async Task DeletePageAsync(bool? action = null)
    {
        if (action is null)
        {
            await this.deletePageDialog.ShowAsync();
        }
        else if (action.Value)
        {
            ArgumentNullException.ThrowIfNull(this.pageOutline?.PageId, nameof(this.pageOutline.PageId));
            var deleted = await BlocksProvider.DeletePageAsync(this.pageOutline.PageId.Value, CancellationToken.None);
            if (deleted)
            {
                Nav.NavigateTo(Nav.Uri, forceLoad: true);
            }
        }
        else
        {
            await this.deletePageDialog.CloseAsync();
        }
    }

    Task ShowPageSettingsAsync()
    {
        showSettings = !showSettings;

        if (showSettings)
        {
            if (pageOutline?.Exists ?? false)
            {
                settingsModel = new UpdateBlockSettingsRequest
                {
                    Id = pageOutline?.PageId ?? Guid.Empty,
                    Name = pageOutline?.Name ?? string.Empty,
                    Title = pageOutline?.Title ?? string.Empty,
                    State = pageOutline?.State ?? PublishState.Draft
                };
            }
            else
            {
                settingsModel = new UpdateBlockSettingsRequest
                {
                    Id = Guid.Empty,
                    Name = string.Empty,
                    Title = string.Empty,
                    State = PublishState.Draft
                };
            }
        }

        StateHasChanged();

        return Task.CompletedTask;
    }

    async Task UpdateBlockSettingsAsync()
    {
        ArgumentNullException.ThrowIfNull(settingsModel.Id, nameof(settingsModel.Id));
        ArgumentNullException.ThrowIfNull(settingsModel.Name, nameof(settingsModel.Name));
        ArgumentNullException.ThrowIfNull(settingsModel.Title, nameof(settingsModel.Title));

        await BlocksProvider.UpdatePageAsync(settingsModel, CancellationToken.None);
        showSettings = false;

        await RefreshPageAsync();
    }

    Task SwitchRenderModeAsync()
    {
        RenderMode = RenderMode == PageRenderMode.Edit ? PageRenderMode.ReadOnly : PageRenderMode.Edit;
        return RefreshPageAsync();
    }

    async Task PublishPageDraftAsync() => await PublishPageAsync(PublishState.Draft);
    async Task PublishPagePublishedAsync() => await PublishPageAsync(PublishState.Published);
    async Task PublishPageArchivedAsync() => await PublishPageAsync(PublishState.Archived);

    async Task PublishPageAsync(PublishState publishState)
    {
        ArgumentNullException.ThrowIfNull(pageOutline?.PageId, nameof(pageOutline.PageId));
        this.pageOutline.State = await BlocksProvider.PublishPageAsync(pageOutline.PageId.Value, publishState,
        CancellationToken.None);

        await RefreshPageAsync();
    }
}
