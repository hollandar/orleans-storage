@page "/{**PageName}"
@using Cadence.UI.Components
@using Webefinity.Module.Blocks.Services
@inject NavigationManager Nav
@inject IHttpContextAccessor HttpContextAccessor
@inject BlocksProviderService BlocksProvider

@if (this.RenderMode == PageRenderMode.Edit)
{
    @rendermode InteractiveServer
}

<PageTitle>@(pageExists?.Title ?? "Loading...")</PageTitle>

<BlockAuthorizeView>
    <Authorized>
        @if (pageExists?.Exists ?? false)
        {
            @switch (RenderMode)
            {
                case PageRenderMode.Edit:
                    {
                        <div class="blocks-actionbar stack horizontal start gap-2">
                            <div class="bold">Page</div>
                            <div><Button class="button inline" Clicked="@(() => RenderMode = PageRenderMode.ReadOnly)"><i
                                        class="fa-solid fa-x"></i></Button></div>
                            <div><Button class="button inline" Clicked="ShowPageSettingsAsync"><i class="fa-solid fa-cog"></i></Button>
                            </div>
                            <div><a class="button inline"><i class="fa-solid fa-eye"></i></a></div>
                            <div><Button class="control" Clicked="() => DeletePageAsync()" title="Delete this page.">
                                    <Icon><i class="fa-solid fa-trash"></i></Icon>
                                </Button></div>
                            <div>This page is in draft.</div>
                        </div>
                        @if (showSettings)
                        {
                            <div class="panel">
                                <h4>Page Settings</h4>
                            <EditForm Model="@settingsModel" OnValidSubmit="UpdateBlockSettingsAsync">
                                <div class="field">
                                    <InputText type="text" @bind-Value="settingsModel.Name" Label="Name" Placeholder="Page name" Required />
                                    <ValidationMessage For="@(() => settingsModel.Name)" />
                                </div>
                                <div class="field">
                                    <InputText type="text" @bind-Value="settingsModel.Title" Label="Title" Placeholder="Page title" Required />
                                    <ValidationMessage For="@(() => settingsModel.Title)" />
                                </div>
                                <div class="actions">
                                    <button class="primary" type="submit">Update</button>
                                    <button class="secondary" type="button" @onclick="() => showSettings = false">Close</button>
                                </div>
                            </EditForm>
                            </div>
                        }
                        <BlocksPageByName PageName="@PageName" Edit="true" />
                    }
                    break;
                case PageRenderMode.ReadOnly:
                    {
                        <div class="blocks-actionbar stack horizontal start gap-2">
                            <div class="bold">Page</div>
                            <div><Button class="inline" Clicked="@(() => RenderMode = PageRenderMode.Edit)"><i
                                        class="fa-solid fa-pencil"></i></Button></div>
                            <div>This page is in draft.</div>
                        </div>
                        <BlocksPageByName_ReadOnly PageName="@PageName" />
                    }
                    break;
                default:
                    {
                        <div class="alert danger">
                            Unsupported render mode.
                        </div>

                    }
                    break;
            }
        }
        else
        {
            <PageNotFound PageName="@PageName" />
        }

        <Dialog Modal @ref="deletePageDialog">
            <Header>
                <h4>About to delete '@pageExists.Title'?</h4>
            </Header>
            <Content>
                <p>You are about to delete this page and all content on the page, are you sure?
                </p>
                <p>You can instead change page settings to mark it archived or deleted.</p>
            </Content>
            <Footer>
                <div class="actions end">
                    <Button class="primary" Clicked="async () => await DeletePageAsync(true)">Yes</Button>
                    <Button class="secondary" Clicked="async () => await DeletePageAsync(false)">No</Button>
                </div>
            </Footer>
        </Dialog>

    </Authorized>
    <NotAuthorized>
        @if (pageExists?.Exists ?? false)
        {
            <BlocksPageByName_ReadOnly PageName="@PageName" />
        }
        else
        {
            <PageTitle>Page not found</PageTitle>
            <h1>Page not found!</h1>
            <p>The page you are looking for does not exist.</p>
        }
    </NotAuthorized>
</BlockAuthorizeView>


@code {
    public enum PageRenderMode
    {
        ReadOnly,
        Edit
    }
    [Parameter] public string? PageName { get; set; } = default!;
    [Parameter] public PageRenderMode RenderMode { get; set; } = PageRenderMode.ReadOnly;
    private PageExistsModel? pageExists = default!;
    Dialog deletePageDialog = default!;
    UpdateBlockSettingsRequest settingsModel = new();
    bool showSettings = false;


    protected override async Task OnInitializedAsync()
    {
        PageName ??= "home";
        await RefreshPageAsync();

        await base.OnInitializedAsync();
    }

    async Task RefreshPageAsync()
    {
        pageExists = await BlocksProvider.PageExistsAsync(PageName, CancellationToken.None);
        if (pageExists.Exists)
        {
            settingsModel.Id = pageExists?.PageId ?? Guid.Empty;
            settingsModel.Name = pageExists?.Name ?? string.Empty;
            settingsModel.Title = pageExists?.Title ?? string.Empty;
        }
        StateHasChanged();
    }

    protected Uri GetPageUri() => new Uri(Nav.Uri);

    async Task DeletePageAsync(bool? action = null)
    {
        if (action is null)
        {
            await this.deletePageDialog.ShowAsync();
        }
        else if (action.Value)
        {
            ArgumentNullException.ThrowIfNull(this.pageExists?.PageId, nameof(this.pageExists.PageId));
            var deleted = await BlocksProvider.DeletePageAsync(this.pageExists.PageId.Value, CancellationToken.None);
            if (deleted)
            {
                Nav.NavigateTo(Nav.Uri, forceLoad: true);
            }
        }
        else
        {
            await this.deletePageDialog.CloseAsync();
        }
    }

    async Task ShowPageSettingsAsync()
    {
        showSettings = !showSettings;
        StateHasChanged();
    }
    async Task UpdateBlockSettingsAsync()
    {
        ArgumentNullException.ThrowIfNull(settingsModel.Id, nameof(settingsModel.Id));
        ArgumentNullException.ThrowIfNull(settingsModel.Name, nameof(settingsModel.Name));
        ArgumentNullException.ThrowIfNull(settingsModel.Title, nameof(settingsModel.Title));

        await BlocksProvider.UpdatePageAsync(settingsModel, CancellationToken.None);
        showSettings = false;

        await RefreshPageAsync();
    }
}
