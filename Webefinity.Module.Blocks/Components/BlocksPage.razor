@page "/{**PageName}"
@using Webefinity.Module.Blocks.Services
@inject NavigationManager Nav
@inject IHttpContextAccessor HttpContextAccessor
@inject BlocksProviderService BlocksProvider

<BlockAuthorizeView>
    <Authorized>
        @if (pageExists) {
            @if (Mode == "edit")
            {

                <div class="blocks-actionbar stack horizontal end">
                    <a class="button primary" href="@ViewUri()"><i class="fa-solid fa-x"></i><span>View</span></a>
                </div>
                <BlocksPageByName PageName="@PageName" Edit="true" />
            }
            else
            {
                <div class="blocks-actionbar stack horizontal end">
                    <a class="button primary" href="@EditUri()"><i class="fa-solid fa-pencil"></i><span>Edit</span></a>
                </div>
                <BlocksPageByName_ReadOnly PageName="@PageName" />
            }
        }
        else
        {
            <PageNotFound PageName="@PageName"/>
        }

    </Authorized>
    <NotAuthorized>
        @if (pageExists)
        {
            <BlocksPageByName_ReadOnly PageName="@PageName" />
        }
        else
        {
            <PageTitle>Page not found</PageTitle>
            <h1>Page not found!</h1>
            <p>The page you are looking for does not exist.</p>
        }
    </NotAuthorized>
</BlockAuthorizeView>


@code {
    [Parameter] public string? PageName { get; set; } = default!;
    [Parameter, SupplyParameterFromQuery(Name = "mode")] public string Mode { get; set; } = "view";
    private bool pageExists = false;

    protected override async Task OnInitializedAsync()
    {
        PageName ??= "home";
        pageExists = await BlocksProvider.PageExistsAsync(PageName, CancellationToken.None);
        await base.OnInitializedAsync();
    }

    protected string EditUri()
    {
        var uri = GetPageUri();
        var queryParameters = System.Web.HttpUtility.ParseQueryString(uri.Query);
        queryParameters["mode"] = "edit";
        var builder = new UriBuilder(uri);
        builder.Query = queryParameters.ToString();
        return builder.ToString();
    }

    protected string ViewUri()
    {
        var uri = GetPageUri();
        var queryParameters = System.Web.HttpUtility.ParseQueryString(uri.Query);
        queryParameters.Remove("mode");
        var builder = new UriBuilder(uri);
        builder.Query = queryParameters.ToString();
        return builder.ToString();
    }

    protected Uri GetPageUri() => new Uri(Nav.Uri);
}
