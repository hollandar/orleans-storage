@using Cadence.UI.Components
@using System.Text.Json
@using Webefinity.Module.Blocks.Abstractions
@using Webefinity.Module.Blocks.Services

<HeadContent>
    <link rel="stylesheet" href="@Assets["_content/Webefinity.Module.Blocks/css/blocks_page.css"]" />
</HeadContent>

@if (pageModel is not null && pageModel.State == PublishState.Published)
{
    @foreach (var enumBlockState in this.blockEditorStates)
    {
        var blockModel = enumBlockState;
        var hasBlock = BlockProvider.HasBlock(blockModel.Kind);

        <div @key="blockModel.Id" class="blocks-parent">
            @if (hasBlock.block)
            {
                <div class="blocks-container">
                    <div class="blocks-block">
                        <div>
                            @BlockProvider.RenderFragment(blockModel)
                        </div>
                    </div>
                </div>
            }
        </div>
    }
} else {
    <div class="blocks-page-not-found panel" style="margin:1rem;">
        <h1>Page Not Found</h1>
        <p>The page you are looking for does not exist.</p>
        @switch (pageModel?.State)
        {
            case PublishState.Draft:
                <p>This page is currently in draft state.</p>
                break;
            case PublishState.Archived:
                <p>This page has been archived.</p>
                break;
            default:
                <p>Please check the URL or contact support.</p>
                break;
        }
    </div>
}

@code {
    [Inject] public BlocksProviderService BlocksProvider { get; set; } = default!;
    [Inject] internal BlockProviderService BlockProvider { get; set; } = default!;
    [Parameter] public string PageName { get; set; } = default!;

    PageModel pageModel = default!;
    IEnumerable<BlockModel> blockEditorStates = Array.Empty<BlockModel>();

    protected override async Task OnInitializedAsync()
    {
        await RefreshPageModel();
        await base.OnInitializedAsync();
    }

    async Task RefreshPageModel()
    {
        this.pageModel = await BlocksProvider.GetPageModelAsync(PageName, CancellationToken.None);
        this.blockEditorStates = this.pageModel.Blocks.ToList().OrderBy(r => r.Sequence);
        await InvokeAsync(StateHasChanged);
    }
}
